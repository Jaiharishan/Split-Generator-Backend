// Prisma schema for Split Generator (PostgreSQL)
// Generated for migration from SQLite

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(uuid())
  email                   String   @unique
  password_hash           String?
  name                    String
  avatar_url              String?
  provider                String   @default("local")
  provider_id             String?
  email_verified          Boolean  @default(false)
  subscription_status     String   @default("free")
  subscription_plan       String   @default("free")
  subscription_expires_at DateTime?
  stripe_customer_id      String?
  stripe_subscription_id  String?
  bills_created_this_month Int     @default(0)
  bills_limit             Int      @default(3)
  participants_limit      Int      @default(5)
  templates_limit         Int      @default(2)
  email_notifications     Boolean  @default(true)
  notification_preferences Json    @default("{}")
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  sessions                UserSession[]
  bills                   Bill[]
  templates               BillTemplate[]
}

model UserSession {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String
  token      String   @unique
  expires_at DateTime
  created_at DateTime @default(now())
}

model Bill {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  title       String
  total_amount Float
  description String?
  image_url   String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  participants Participant[]
  products     Product[]
}

model Participant {
  id         String     @id @default(uuid())
  bill       Bill       @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  bill_id    String
  name       String
  color      String
  created_at DateTime   @default(now())

  productParticipants ProductParticipant[]
}

model Product {
  id         String     @id @default(uuid())
  bill       Bill       @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  bill_id    String
  name       String
  price      Float
  quantity   Int        @default(1)
  created_at DateTime   @default(now())

  productParticipants ProductParticipant[]
}

model ProductParticipant {
  id             String       @id @default(uuid())
  product        Product      @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id     String
  participant    Participant  @relation(fields: [participant_id], references: [id], onDelete: Cascade)
  participant_id String
  share_percentage Float      @default(100)
  created_at      DateTime   @default(now())

  @@unique([product_id, participant_id])
}

model BillTemplate {
  id          String               @id @default(uuid())
  user        User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  name        String
  description String?
  created_at  DateTime             @default(now())
  updated_at  DateTime             @updatedAt

  participants TemplateParticipant[]
}

model TemplateParticipant {
  id           String         @id @default(uuid())
  template     BillTemplate   @relation(fields: [template_id], references: [id], onDelete: Cascade)
  template_id  String
  name         String
  color        String
  created_at   DateTime       @default(now())
}
